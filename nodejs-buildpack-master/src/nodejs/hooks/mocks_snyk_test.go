// Code generated by MockGen. DO NOT EDIT.
// Source: snyk.go

// Package hooks_test is a generated GoMock package.
package hooks_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSnykCommand is a mock of SnykCommand interface
type MockSnykCommand struct {
	ctrl     *gomock.Controller
	recorder *MockSnykCommandMockRecorder
}

// MockSnykCommandMockRecorder is the mock recorder for MockSnykCommand
type MockSnykCommandMockRecorder struct {
	mock *MockSnykCommand
}

// NewMockSnykCommand creates a new mock instance
func NewMockSnykCommand(ctrl *gomock.Controller) *MockSnykCommand {
	mock := &MockSnykCommand{ctrl: ctrl}
	mock.recorder = &MockSnykCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnykCommand) EXPECT() *MockSnykCommandMockRecorder {
	return m.recorder
}

// Output mocks base method
func (m *MockSnykCommand) Output(arg0, arg1 string, arg2 ...string) (string, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Output", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output
func (mr *MockSnykCommandMockRecorder) Output(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockSnykCommand)(nil).Output), varargs...)
}
